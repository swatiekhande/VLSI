library IEEE;
use IEEE.STD_LOGIC_1164.ALL; use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

entity alu_4bit is
Port ( op : in STD_LOGIC_VECTOR (2 downto 0); n1 : in STD_LOGIC_VECTOR (3 downto 0); n2 : in STD_LOGIC_VECTOR (3 downto 0);
result : out STD_LOGIC_VECTOR (3 downto 0); flag : out STD_LOGIC);
end alu_4bit;


architecture Behavioral of alu_4bit is
signal temp : std_logic_vector(4 downto 0):= "00000"; begin
process(n1,n2,op) begin
case op is when "000" =>
temp <= ('0' & n1) + n2; result <= temp(3 downto 0); flag <= temp(4);
when "001" => if(n1 > n2) then result <= n1 - n2; else
result <= n2 - n1; end if;
when "010" => result<= n1 nor n2; when "011" => result<= n1 nand n2; when "100" => result<= n1 or n2; when "101" => result<= n1 and n2; when "110" => result<= n1 xnor n2; when others => result <= not n1;
end case; end process;
end Behavioral;


Test Bench
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity alu_test is
-- Port ( ); end alu_test;

architecture Behavioral of alu_test is component alu_4bit
PORT(
op : IN std_logic_vector(2 downto 0); n1 : IN std_logic_vector(3 downto 0); n2 : IN std_logic_vector(3 downto 0);
result : OUT std_logic_vector(3 downto 0); flag : OUT std_logic
);
end component;
signal n1 : std_logic_vector(3 downto 0) := (others => '0'); signal n2 : std_logic_vector(3 downto 0) := (others => '0'); signal op : std_logic_vector(2 downto 0) := (others => '0'); signal result : std_logic_vector(3 downto 0);
signal flag : std_logic;

begin
uut: alu_4bit PORT MAP ( op => op,
n1 => n1, n2 => n2,
result => result, flag => flag
);
stim_proc: process begin
n1 <= "1111";
n2 <= "0010";
op <= "000";
wait for 10ns; n1 <= "1100";
n2 <= "0010";
wait for 10ns; op <= "001";
wait for 10ns; op <= "010";
wait for 10ns; op <= "011";
wait for 10ns; op <= "100";
wait for 10ns; op <= "101";
wait for 10ns; op <= "110";
wait for 10ns; op <= "111";
wait for 10ns; end process; end Behavioral;
